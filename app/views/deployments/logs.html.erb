<% content_for :title, "Deployment Logs - #{@deployment.name}" %>

<div class="container-fluid">
  <!-- Header -->
  <div class="row mb-4">
    <div class="col">
      <div class="d-flex justify-content-between align-items-center">
        <div>
          <h1 class="h3 mb-1 text-gray-800">
            <i class="fas fa-terminal me-2 text-primary"></i>
            Deployment Logs
          </h1>
          <p class="text-muted mb-0">
            Real-time deployment logs for <strong><%= @deployment.name %></strong>
          </p>
        </div>
        <div>
          <%= link_to @deployment, class: "btn btn-outline-secondary me-2" do %>
            <i class="fas fa-arrow-left me-2"></i>Back to App
          <% end %>
          <button class="btn btn-outline-primary" onclick="toggleAutoScroll()">
            <i class="fas fa-sync-alt me-2"></i>
            <span id="auto-scroll-text">Auto-scroll: On</span>
          </button>
        </div>
      </div>
    </div>
  </div>

  <div class="row">
    <!-- Logs Display -->
    <div class="col-lg-9">
      <div class="card shadow">
        <div class="card-header py-3">
          <div class="d-flex justify-content-between align-items-center mb-3">
            <h6 class="m-0 font-weight-bold text-primary">
              <i class="fas fa-file-alt me-2"></i>Deployment Logs
            </h6>
            <div>
              <span class="badge <%= @deployment.status_badge_class %> fs-6">
                <i class="<%= @deployment.status_icon %> me-1"></i>
                <span id="deployment-status"><%= @deployment.status_text %></span>
              </span>
            </div>
          </div>
          
          <!-- Deployment Attempts Tabs -->
          <% if @deployment.deployment_attempts.any? %>
            <div class="d-flex justify-content-between align-items-center mb-2">
              <small class="text-muted">
                <i class="fas fa-history me-1"></i>
                <%= @deployment.deployment_attempts.count %> deployment attempt<%= 's' unless @deployment.deployment_attempts.count == 1 %>
              </small>
              <small class="text-muted">Click on an attempt to view its logs</small>
            </div>
            <ul class="nav nav-tabs card-header-tabs" id="attemptTabs" role="tablist">
              <% @deployment.deployment_attempts.recent.each_with_index do |attempt, index| %>
                <li class="nav-item" role="presentation">
                  <button class="nav-link <%= 'active' if index == 0 %>" 
                          id="attempt-<%= attempt.id %>-tab" 
                          data-mdb-toggle="tab" 
                          data-mdb-target="#attempt-<%= attempt.id %>" 
                          type="button" 
                          role="tab"
                          onclick="switchToAttempt(<%= attempt.id %>)">
                    <span class="badge <%= attempt.status_badge_class %> me-2">
                      <i class="<%= attempt.status_icon %>"></i>
                    </span>
                    Attempt #<%= attempt.attempt_number %>
                    <% if attempt.started_at %>
                      <small class="text-muted d-block">
                        <%= attempt.started_at.strftime("%m/%d %H:%M") %>
                        <% if attempt.completed? %>
                          (<%= attempt.duration_text %>)
                        <% end %>
                      </small>
                    <% end %>
                  </button>
                </li>
              <% end %>
            </ul>
          <% end %>
        </div>
        
        <div class="card-body p-0">
          <% if @deployment.deployment_attempts.any? %>
            <div class="tab-content" id="attemptTabsContent">
              <% @deployment.deployment_attempts.recent.each_with_index do |attempt, index| %>
                <div class="tab-pane fade <%= 'show active' if index == 0 %>" 
                     id="attempt-<%= attempt.id %>" 
                     role="tabpanel"
                     style="<%= 'display: none;' unless index == 0 %>">
                  <div class="d-flex justify-content-between align-items-center p-3 bg-light border-bottom">
                    <div>
                      <strong>Attempt #<%= attempt.attempt_number %></strong>
                      <span class="badge <%= attempt.status_badge_class %> ms-2">
                        <i class="<%= attempt.status_icon %> me-1"></i>
                        <%= attempt.status.capitalize %>
                      </span>
                    </div>
                    <div class="text-muted">
                      <% if attempt.started_at %>
                        Started: <%= attempt.started_at.strftime("%B %d, %Y at %I:%M %p") %>
                        <% if attempt.completed_at %>
                          <br>Duration: <%= attempt.duration_text %>
                        <% end %>
                      <% end %>
                    </div>
                  </div>
                  <div class="bg-dark text-white p-3" style="height: 550px; overflow-y: auto; font-family: 'Courier New', monospace;" data-attempt-id="<%= attempt.id %>">
                    <div class="attempt-logs-content">
                      <% if attempt.logs.present? %>
                        <% attempt.logs.split("\n").each do |log_line| %>
                          <div class="log-line"><%= log_line %></div>
                        <% end %>
                      <% else %>
                        <div class="log-line text-muted">[No logs available for this attempt]</div>
                      <% end %>
                    </div>
                    <% if attempt.running? %>
                      <div class="loading-indicator">
                        <div class="text-warning">
                          <i class="fas fa-spinner fa-spin me-2"></i>Deployment in progress...
                        </div>
                      </div>
                    <% end %>
                  </div>
                </div>
              <% end %>
            </div>
          <% else %>
            <div class="bg-dark text-white p-3" style="height: 600px; overflow-y: auto; font-family: 'Courier New', monospace;">
              <div class="log-line text-muted">[No deployment attempts yet]</div>
            </div>
          <% end %>
        </div>
      </div>


      <!-- Help -->
      <div class="card shadow mt-3">
        <div class="card-header py-3">
          <h6 class="m-0 font-weight-bold text-primary">
            <i class="fas fa-question-circle me-2"></i>Understanding Logs
          </h6>
        </div>
        <div class="card-body">
          <div class="mb-3">
            <h6 class="text-success">Success Messages</h6>
            <p class="small text-muted">Look for ✓ markers indicating successful steps.</p>
          </div>

          <div class="mb-3">
            <h6 class="text-danger">Error Messages</h6>
            <p class="small text-muted">✗ markers and ERROR messages indicate issues that need attention.</p>
          </div>

          <div class="mb-3">
            <h6 class="text-info">Process Flow</h6>
            <p class="small text-muted">Logs show repository cloning, Dokku app creation, and deployment steps.</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Status & Actions -->
    <div class="col-lg-3">
      <!-- Actions -->
      <div class="card shadow mb-4">
        <div class="card-header py-3">
          <h6 class="m-0 font-weight-bold text-success">
            <i class="fas fa-cogs me-2"></i>Actions
          </h6>
        </div>
        <div class="card-body">
          <div class="d-grid gap-2">
            <% if @deployment.deployment_status == 'deploying' %>
              <button class="btn btn-warning w-100" disabled>
                <i class="fas fa-spinner fa-spin me-2"></i>Deploying...
              </button>
            <% elsif @deployment.can_deploy? && @deployment.deployment_configured? %>
              <%= form_with url: deploy_deployment_path(@deployment), method: :post, local: true do |f| %>
                <%= submit_tag "Deploy Again", class: "btn btn-success w-100",
                               data: { confirm: "Start a new deployment? This will override any existing deployment." } %>
              <% end %>
            <% end %>

            <%= link_to git_configuration_deployment_path(@deployment), class: "btn btn-outline-primary" do %>
              <i class="fab fa-git-alt me-2"></i>Git Configuration
            <% end %>

            <% if @deployment.dokku_url.present? %>
              <%= link_to @deployment.dokku_url, target: "_blank", rel: "noopener", class: "btn btn-outline-success" do %>
                <i class="fas fa-external-link-alt me-2"></i>Visit App
              <% end %>
            <% end %>
          </div>
        </div>
      </div>

      <!-- Current Status -->
      <div class="card shadow mb-4">
        <div class="card-header py-3">
          <h6 class="m-0 font-weight-bold text-primary">
            <i class="fas fa-info-circle me-2"></i>Deployment Status
          </h6>
        </div>
        <div class="card-body">
          <div class="text-center mb-3">
            <span class="badge <%= @deployment.status_badge_class %> fs-5 px-3 py-2" id="status-badge">
              <i class="<%= @deployment.status_icon %> me-2" id="status-icon"></i>
              <span id="status-text"><%= @deployment.status_text %></span>
            </span>
          </div>
          
          <div class="mb-3">
            <strong>Method:</strong><br>
            <small class="text-muted"><%= @deployment.deployment_method_text %></small>
          </div>
          
          <% if @deployment.repository_url.present? %>
            <div class="mb-3">
              <strong>Repository:</strong><br>
              <small class="text-muted word-break"><%= @deployment.repository_url %></small>
            </div>
          <% end %>
          
          <% if @deployment.repository_branch.present? %>
            <div class="mb-3">
              <strong>Branch:</strong><br>
              <code class="text-info"><%= @deployment.repository_branch %></code>
            </div>
          <% end %>
          
          <% if @deployment.last_deployment_at.present? %>
            <div class="mb-3">
              <strong>Last Deployed:</strong><br>
              <small class="text-muted">
                <%= @deployment.last_deployment_at.strftime("%B %d, %Y at %I:%M %p") %>
                <br><%= time_ago_in_words(@deployment.last_deployment_at) %> ago
              </small>
            </div>
          <% end %>
        </div>
      </div>

      <!-- Deployment History -->
      <% if @deployment.deployment_attempts.any? %>
        <div class="card shadow mb-4">
          <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-success">
              <i class="fas fa-history me-2"></i>Deployment History
            </h6>
          </div>
          <div class="card-body">
            <div class="row text-center mb-3">
              <div class="col-6">
                <div class="text-success">
                  <i class="fas fa-check-circle fa-2x"></i>
                  <div class="mt-1">
                    <strong><%= @deployment.successful_deployments_count %></strong>
                    <br><small>Successful</small>
                  </div>
                </div>
              </div>
              <div class="col-6">
                <div class="text-danger">
                  <i class="fas fa-times-circle fa-2x"></i>
                  <div class="mt-1">
                    <strong><%= @deployment.failed_deployments_count %></strong>
                    <br><small>Failed</small>
                  </div>
                </div>
              </div>
            </div>
            
            <% if @deployment.latest_deployment_attempt %>
              <div class="border-top pt-3">
                <small class="text-muted">Latest Attempt:</small>
                <div class="d-flex justify-content-between align-items-center">
                  <span class="badge <%= @deployment.latest_deployment_attempt.status_badge_class %>">
                    <i class="<%= @deployment.latest_deployment_attempt.status_icon %> me-1"></i>
                    #<%= @deployment.latest_deployment_attempt.attempt_number %>
                  </span>
                  <small class="text-muted">
                    <%= @deployment.latest_deployment_attempt.duration_text %>
                  </small>
                </div>
                <% if @deployment.latest_deployment_attempt.error_message.present? %>
                  <small class="text-danger d-block mt-1">
                    <%= truncate(@deployment.latest_deployment_attempt.error_message, length: 100) %>
                  </small>
                <% end %>
              </div>
            <% end %>
          </div>
        </div>
      <% end %>

    </div>
  </div>
</div>

<script>
  let autoScroll = true;
  let pollingInterval;
  
  // Auto-scroll toggle
  function toggleAutoScroll() {
    autoScroll = !autoScroll;
    const text = document.getElementById('auto-scroll-text');
    text.textContent = `Auto-scroll: ${autoScroll ? 'On' : 'Off'}`;
    
    if (autoScroll) {
      scrollToBottom();
    }
  }
  
  // Scroll to bottom of logs
  function scrollToBottom() {
    const container = document.getElementById('logs-container');
    if (container) {
      container.scrollTop = container.scrollHeight;
    }
  }
  
  // Scroll to bottom of active tab
  function scrollToBottomActiveTab() {
    const activeTab = document.querySelector('.tab-pane.active [data-attempt-id]');
    if (activeTab) {
      activeTab.scrollTop = activeTab.scrollHeight;
    } else {
      // Fallback: scroll the active tab pane itself if structured differently
      const activePane = document.querySelector('.tab-pane.active');
      if (activePane) {
        const scrollContainer = activePane.querySelector('[data-attempt-id]');
        if (scrollContainer) {
          scrollContainer.scrollTop = scrollContainer.scrollHeight;
        }
      }
    }
  }
  
  // Poll for log updates
  function pollForUpdates() {
    fetch(window.location.href + '.json')
      .then(response => response.json())
      .then(data => {
        // Update logs for the current active attempt
        if (data.latest_attempt) {
          updateAttemptLogs(data.latest_attempt);
        }
        
        // Update status
        updateStatus(data.status, data.status_text, data.status_icon, data.status_badge_class);
        
        // Auto-scroll if enabled
        if (autoScroll) {
          scrollToBottomActiveTab();
        }
        
        // Hide loading indicators if deployment is complete
        const loadingIndicators = document.querySelectorAll('.loading-indicator');
        if (data.status !== 'deploying') {
          loadingIndicators.forEach(indicator => {
            indicator.style.display = 'none';
          });
          // Stop polling if deployment is complete
          if (pollingInterval) {
            clearInterval(pollingInterval);
          }
        }
      })
      .catch(error => {
        console.error('Error polling for updates:', error);
      });
  }
  
  // Update logs for a specific attempt
  function updateAttemptLogs(attempt) {
    const attemptContainer = document.querySelector(`[data-attempt-id="${attempt.id}"]`);
    if (attemptContainer) {
      const logsContent = attemptContainer.querySelector('.attempt-logs-content');
      if (logsContent && attempt.logs) {
        logsContent.innerHTML = attempt.logs.split('\n').map(line => 
          `<div class="log-line">${escapeHtml(line)}</div>`
        ).join('');
      }
    }
  }
  
  // Update status display
  function updateStatus(status, statusText, statusIcon, statusBadgeClass) {
    const statusBadge = document.getElementById('status-badge');
    const statusIconEl = document.getElementById('status-icon');
    const statusTextEl = document.getElementById('status-text');
    const deploymentStatusEl = document.getElementById('deployment-status');
    
    if (statusBadge && statusIconEl && statusTextEl && deploymentStatusEl) {
      statusBadge.className = `badge ${statusBadgeClass} fs-5 px-3 py-2`;
      statusIconEl.className = `${statusIcon} me-2`;
      statusTextEl.textContent = statusText;
      deploymentStatusEl.textContent = statusText;
    }
  }
  
  // Escape HTML to prevent XSS
  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }
  
  let deploymentLogsChannel = null;
  let currentAttemptId = <%= @deployment.latest_deployment_attempt&.id || 'null' %>;
  
  // Switch between deployment attempts
  function switchToAttempt(attemptId) {
    // Hide all tab panes
    document.querySelectorAll('.tab-pane').forEach(pane => {
      pane.classList.remove('show', 'active');
      pane.style.display = 'none';
    });
    
    // Remove active class from all tabs
    document.querySelectorAll('.nav-link').forEach(tab => {
      tab.classList.remove('active');
    });
    
    // Show the selected tab pane
    const targetPane = document.getElementById(`attempt-${attemptId}`);
    const targetTab = document.getElementById(`attempt-${attemptId}-tab`);
    
    if (targetPane && targetTab) {
      targetPane.classList.add('show', 'active');
      targetPane.style.display = 'block';
      targetTab.classList.add('active');
      
      // Update current attempt ID
      currentAttemptId = attemptId;
      
      // Scroll to bottom if auto-scroll is enabled
      if (autoScroll) {
        setTimeout(() => {
          scrollToBottomActiveTab();
        }, 100);
      }
    }
  }
  
  // Subscribe to real-time deployment logs
  function subscribeToDeploymentLogs() {
    if (deploymentLogsChannel) {
      deploymentLogsChannel.unsubscribe();
    }
    
    const deploymentUuid = '<%= @deployment.uuid %>';
    const latestAttemptId = <%= @deployment.latest_deployment_attempt&.id || 'null' %>;
    
    deploymentLogsChannel = window.actionCableConsumer.subscriptions.create(
      { 
        channel: "DeploymentLogsChannel",
        deployment_uuid: deploymentUuid,
        attempt_id: latestAttemptId
      },
      {
        received: function(data) {
          console.log('Received deployment log data:', data);
          
          if (data.type === 'log_message') {
            appendLogMessage(data.attempt_id, data.message);
            
            if (autoScroll) {
              scrollToBottomActiveTab();
            }
          } else if (data.type === 'deployment_completed') {
            handleDeploymentCompletion(data);
          }
        },
        
        connected: function() {
          console.log('Connected to deployment logs channel');
        },
        
        disconnected: function() {
          console.log('Disconnected from deployment logs channel');
        }
      }
    );
  }
  
  // Append a new log message to the appropriate attempt tab
  function appendLogMessage(attemptId, message) {
    const attemptContainer = document.querySelector(`[data-attempt-id="${attemptId}"]`);
    if (attemptContainer) {
      const logsContent = attemptContainer.querySelector('.attempt-logs-content');
      if (logsContent) {
        const logLine = document.createElement('div');
        logLine.className = 'log-line';
        logLine.textContent = message;
        logsContent.appendChild(logLine);
      }
    }
  }
  
  // Handle deployment completion
  function handleDeploymentCompletion(data) {
    console.log('Deployment completed:', data);
    
    // Hide loading indicators
    const loadingIndicators = document.querySelectorAll('.loading-indicator');
    loadingIndicators.forEach(indicator => {
      indicator.style.display = 'none';
    });
    
    // Stop polling if it was running
    if (pollingInterval) {
      clearInterval(pollingInterval);
      pollingInterval = null;
    }
    
    // Update the tab badge with final status
    updateAttemptTabStatus(data.attempt_id, data.status, data.duration);
    
    // Show completion notification
    const status = data.success ? 'success' : 'error';
    const title = data.success ? 'Deployment Successful!' : 'Deployment Failed';
    const message = data.success 
      ? `Deployment completed successfully in ${data.duration}` 
      : `Deployment failed: ${data.error_message || 'Unknown error'}`;
    
    showToast(status, message, title);
    
    // Refresh the page after a short delay to update all UI elements
    setTimeout(() => {
      if (confirm('Deployment completed! Would you like to refresh the page to see the updated status?')) {
        window.location.reload();
      }
    }, 3000);
  }
  
  // Update attempt tab status badge
  function updateAttemptTabStatus(attemptId, status, duration) {
    const tabButton = document.querySelector(`#attempt-${attemptId}-tab`);
    if (tabButton) {
      const badge = tabButton.querySelector('.badge');
      if (badge) {
        const statusClass = status === 'success' ? 'bg-success' : 'bg-danger';
        const statusIcon = status === 'success' ? 'fas fa-check-circle' : 'fas fa-times-circle';
        
        badge.className = `badge ${statusClass} me-2`;
        badge.innerHTML = `<i class="${statusIcon}"></i>`;
      }
      
      // Add duration if available
      if (duration) {
        const durationSpan = tabButton.querySelector('small') || document.createElement('small');
        durationSpan.className = 'text-muted';
        durationSpan.textContent = `(${duration})`;
        
        if (!tabButton.querySelector('small')) {
          tabButton.appendChild(document.createTextNode(' '));
          tabButton.appendChild(durationSpan);
        }
      }
    }
  }
  
  // Show toast notification
  function showToast(type, message, title) {
    const toastHtml = `
      <div class="toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
          <div class="toast-body">
            <strong>${title}:</strong> ${message}
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-mdb-dismiss="toast" aria-label="Close"></button>
        </div>
      </div>
    `;
    
    let toastContainer = document.querySelector('.toast-container');
    if (!toastContainer) {
      toastContainer = document.createElement('div');
      toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
      document.body.appendChild(toastContainer);
    }
    
    toastContainer.insertAdjacentHTML('beforeend', toastHtml);
    
    const toastElement = toastContainer.lastElementChild;
    const toast = new mdb.Toast(toastElement);
    toast.show();
    
    toastElement.addEventListener('hidden.mdb.toast', () => {
      toastElement.remove();
    });
  }

  // Start polling when page loads
  document.addEventListener('DOMContentLoaded', function() {
    // Initial scroll to bottom
    scrollToBottomActiveTab();
    
    // Subscribe to real-time logs
    subscribeToDeploymentLogs();
    
    // Fallback polling every 10 seconds (much slower than before since we have real-time updates)
    const currentStatus = '<%= @deployment.deployment_status %>';
    if (currentStatus === 'deploying') {
      pollingInterval = setInterval(pollForUpdates, 10000); // 10 seconds instead of 2
    }
    
    // Handle tab switching - scroll to bottom when switching tabs
    const tabLinks = document.querySelectorAll('[data-bs-toggle="tab"]');
    tabLinks.forEach(tab => {
      tab.addEventListener('shown.bs.tab', function() {
        setTimeout(() => {
          if (autoScroll) {
            scrollToBottomActiveTab();
          }
        }, 100);
      });
    });
  });
</script>

<style>
.text-gray-800 {
  color: #5a5c69 !important;
}
.card {
  box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15) !important;
}
.word-break {
  word-break: break-all;
}
.log-line {
  margin-bottom: 2px;
  white-space: pre-wrap;
}
.log-line:hover {
  background-color: rgba(255, 255, 255, 0.1);
}
#logs-container::-webkit-scrollbar {
  width: 8px;
}
#logs-container::-webkit-scrollbar-track {
  background: #2d3748;
}
#logs-container::-webkit-scrollbar-thumb {
  background: #4a5568;
  border-radius: 4px;
}
#logs-container::-webkit-scrollbar-thumb:hover {
  background: #718096;
}
</style>